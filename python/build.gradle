plugins {
    // Provides some tasks and conventions that are common to most builds.
    id 'base'
}

// Define custom configurations to manage dependencies on other projects.
// Appropriate tasks from projects declared in the `dependencies` block would be
// automatically executed when the configuration is resolved (in `copyArtifacts`).
configurations {
    // For shared libraries.
    libs {
        // Help Gradle resolve dependencies since there are multiple variants
        // available for shared libraries.
        attributes {
            // Select runtime variant.
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.NATIVE_RUNTIME))
            // Select release variant.
            attribute(CppBinary.OPTIMIZED_ATTRIBUTE, true)
        }
        canBeConsumed = false
        canBeResolved = true
    }
    // For jar dependencies.
    jars {
        canBeConsumed = false
        canBeResolved = true
    }
    extensionLibraries {
        description = 'Shared libraries to be used as C/C++ extensions for CPython.'
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.NATIVE_RUNTIME))
            attribute(CppBinary.LINKAGE_ATTRIBUTE, Linkage.SHARED)
        }
    }
    pomFiles {
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, 'pom-file'))
        }
        canBeConsumed = false
        canBeResolved = true
    }
}

// Declare dependencies.
dependencies {
    // Contains libpjrmijni.so
    libs project(":java:jni")
    // Contains libpjrmi.so
    libs project(":cpp")
    // Contains pjrmi.jar
    jars project(":java")
    // Contains pom.xml
    pomFiles project(":java")
}

// Copy artifacts to be included in the python package.
tasks.register('copyArtifacts', Copy) {
    destinationDir = file("$projectDir/pjrmi")
    into("lib/") {
        from configurations.libs
        from configurations.jars
        from (configurations.pomFiles) {
            rename ".*", "pjrmi.pom"
        }
    }
}

// Generate _config.py containing build information.
tasks.register('genConfigFile') {
    def configFile = "$projectDir/pjrmi/_config.py"
    outputs.files(configFile)
    // Re-generate when pjrmiVersion property changes.
    inputs.property('version', pjrmiVersion)
    doLast {
        file(configFile).text = """\
\"""
Configuration for PJRmi.

This file is auto-generated. Do not edit.
\"""
PJRMI_VERSION = "${pjrmiVersion}"
"""
    }
}

/**
 * Utility task that generate files by running commands.
 */
abstract class GenerateFileExec extends DefaultTask {

    @OutputFile
    abstract RegularFileProperty getTarget()

    @Input
    abstract MapProperty<String, Object> getEnvironmentVariables()

    @Input
    abstract ListProperty<String> getCommand()

    @TaskAction
    def build() {
        project.exec {
            environment(getEnvironmentVariables().get())
            commandLine(getCommand().get())
        }
    }
}

tasks.register('buildExt', GenerateFileExec) {
    target = project.layout.buildDirectory.file('lib.linux-x86_64-cpython-311/pjrmi/extension.cpython-311-x86_64-linux-gnu.so')
    environmentVariables = project.objects.mapProperty(String, Object)
            .value([
                    'PJRMI_VERSION': pjrmiVersion,
                    'JAVA_HOME': System.properties['java.home'],
                    'INCLUDE_PATH': project(':cpp').library.publicHeaderDirs.singleFile,
                    'LIB_DIRS': [
                            project(':cpp').layout.buildDirectory.getAsFile().get().absolutePath + '/lib/main/debug',
                            project(':java:jni').layout.buildDirectory.getAsFile().get().absolutePath + '/libs/main/shared',
                    ].join(':')
            ])
    command = ['./setup.py', 'build_ext', '--inplace']

    dependsOn copyArtifacts
    dependsOn genConfigFile
}

tasks.register('develop') {
    dependsOn buildExt
    doLast {
        exec {
            environment "PJRMI_VERSION", pjrmiVersion
            environment "JAVA_HOME", System.properties['java.home']
            commandLine "pip3", "install", "--user", "-e", projectDir
        }
    }
}


tasks.register('wheel', GenerateFileExec) {
    target = file("pjrmi-${pjrmiVersion}-cp311-cp311-linux_x86_64.whl")
    environmentVariables = project.objects.mapProperty(String, Object)
            .value([
                    'PJRMI_VERSION': pjrmiVersion,
                    'JAVA_HOME': System.properties['java.home'],
                    'INCLUDE_PATH': project(':cpp').library.publicHeaderDirs.singleFile,
                    'LIB_DIRS': [
                            project(':cpp').layout.buildDirectory.getAsFile().get().absolutePath + '/lib/main/debug',
                            project(':java:jni').layout.buildDirectory.getAsFile().get().absolutePath + '/libs/main/shared',
                    ].join(':')
            ])
    command = ['pip3', 'wheel', '.']
    outputs.dir('pjrmi.egg-info')

    dependsOn buildExt
}

task thin_wheel() {
    // Use pyproject.toml to build a pure-python wheel including the "*.jar" file
    dependsOn copyArtifacts
    dependsOn genConfigFile
    doLast {
        exec {
            environment "PJRMI_VERSION", pjrmiVersion
            environment "JAVA_HOME", System.properties['java.home']
            environment "LIB_DIRS", [
                project(":java:jni").buildDir.absolutePath + "/libs/main/shared",
            ].join(":")
            commandLine "pip3", "wheel", "."
        }
    }
}

tasks.register('test') {
    dependsOn buildExt
    doLast {
        // Run the tests
        def testFiles = files([
                "tests/pjrmi_tests.py",
                "tests/java_python_unpickle.py"
        ])

        testFiles.each { testFile ->
            exec {
                workingDir projectDir
                environment "PYTHONPATH", projectDir
                environment "PYDEVD_DISABLE_FILE_VALIDATION", "1"
                commandLine "python3", "-m", "pytest", testFile
            }
        }
    }
}

tasks.register('cleanPyCache', Delete) {
    delete fileTree(dir: '.', include: '**/*__pycache__')
}

artifacts {
    extensionLibraries(buildExt.target) {
        builtBy(buildExt)
    }
}

assemble {
    dependsOn wheel
}

check {
    dependsOn test
}

clean {
    dependsOn cleanPyCache, cleanWheel, cleanGenConfigFile, cleanBuildExt
}
