/*
 * The Gradle build file for the Java portion of deshaw-pjrmi.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
}

configurations {
    jniHeaders {
        description = 'JNI headers generated from the files using native methods.'
        attributes {
            attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, OperatingSystemFamily.LINUX))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, 'jni-headers'))
        }
        canBeConsumed = true
        canBeResolved = false
    }
    testSharedLibraries {
        description = "Shared libraries for source set 'test'."
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.NATIVE_RUNTIME))
            attribute(CppBinary.DEBUGGABLE_ATTRIBUTE, true)
            attribute(CppBinary.LINKAGE_ATTRIBUTE, Linkage.SHARED)
            attribute(CppBinary.OPTIMIZED_ATTRIBUTE, false)
        }
        canBeConsumed = false
        canBeResolved = true
    }
    pomFiles {
        description = 'POM files'
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, 'pom-file'))
        }
        canBeConsumed = true
        canBeResolved = false
    }
}

// Quieten JavaDoc warnings for missing tags. There are some classes which we
// specifically have imperfect JavaDoc for and the warnings don't really help.
javadoc {
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}

// Configuration from the outside world.
def SNAPPY = 'org.xerial.snappy:snappy-java:' + snappyVersion

// Support for Vectorized math.
ext {
    // The user-given parameter that is used to decide whether to include
    // vectorized classes when building:
    //   ./gradlew build -PincludeVectorized
    INCLUDE_VECTORIZED = 'includeVectorized'
}


// Choose which Java version to use, for the general population. This section
// can be commented out if you want to let the build pick up the Java version
// from the environment, though read the comments about Vectorized support.
java {
    if (project.hasProperty(INCLUDE_VECTORIZED)) {
        // PJRmi is specifically Java11 so as not to force users to later
        // versions. However, as of 20230906, the Vector API incubator module
        // is only available in Java17.
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }
    else {
        // PJRmi is specifically Java11 so as not to force users to later
        // versions, if they have dependencies, so enforce this in the build.
        //
        // If we change this then we should change any workarounds accordingly.
        // Look for JAVA_11_FIXME in the code.
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }
}

publishing {
    publications {
        pjrmi(MavenPublication) {
            version = pjrmiVersion
            groupId = "com.deshaw"
            pom {
                name = 'pjrmi'
                description = 'pjrmi'
                url = 'https://github.com/deshaw/pjrmi'
            }
            from components.java
        }
    }
}

jar {
    // Just the raw 'pjrmi.jar' name, unversioned. This is deployed as a
    // resource for the Python package and is therefore scoped by that.
    archiveBaseName = 'pjrmi'

    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForPjrmiPublication }
        rename '.*', 'pom.xml'
    }

    // Make fat-jar to make python packaging easier.
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Add the agent info to the manifest file
    manifest {
        attributes 'Agent-Class'             : 'com.deshaw.pjrmi.PJRmiAgent'
        attributes 'Premain-Class'           : 'com.deshaw.pjrmi.PJRmiAgent'
        attributes 'Can-Redefine-Classes'    : 'true'
        attributes 'Can-Retransform-Classes' : 'true'
    }
}

compileJava {
    options.compilerArgs << '-parameters'
}

repositories {
    mavenCentral()
}

artifacts {
    jniHeaders(compileJava.options.headerOutputDirectory) {
        builtBy(compileJava)
    }
    pomFiles(generatePomFileForPjrmiPublication.destination) {
        builtBy(generatePomFileForPjrmiPublication)
    }
}

test {
    // Tests depends on the shared libraries generated by `python` and `java:jni` projects
    dependsOn configurations.testSharedLibraries

    // These tests need space
    maxHeapSize = "4g"

    // Ensure that we pick up the versions of the code from this tree, and not
    // from any installation.
    environment    "LD_LIBRARY_PATH",   "$rootDir/cpp/build/lib/main/debug"
    environment    "PYTHONPATH",        "$rootDir/python"
    systemProperty "java.library.path", "$rootDir/java/jni/build/lib/main/debug"

    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // Tests depends on the shared libraries generated by `python` and `java:jni` projects
    testSharedLibraries project(':java:jni')
    testSharedLibraries project(':python')

    // compileOnly because we're creating a fat-jar with all the compile-time
    // dependencies.
    compileOnly SNAPPY
}

// Add the Vector API incubator module when the 'includeVectorized' build
// parameter is passed. Otherwise, exclude the vectorized files that include
// this module from the build.
sourceSets {
    main {
        java {
            if (project.hasProperty(INCLUDE_VECTORIZED)) {
                // Include the Vector API incubator module when building
                compileJava {
                    options.compilerArgs.addAll(['--enable-preview', '--add-modules', 'jdk.incubator.vector'])
                }
                compileTestJava {
                    options.compilerArgs += ['--add-modules', 'jdk.incubator.vector']
                }
                tasks.withType(Test) {
                    jvmArgs += ["--enable-preview", "--add-modules", "jdk.incubator.vector"]
                }
                tasks.withType(JavaExec) {
                    jvmArgs += ["--enable-preview", "--add-modules", "jdk.incubator.vector"]
                }
            }
            else {
                // Remove tests for vectorized modules
                exclude '**/Vectorized*.java'
            }
        }
    }

    test {
        java {
            if (!project.hasProperty(INCLUDE_VECTORIZED)) {
                // Remove tests for vectorized modules
                exclude '**/Vectorized*.java'
            }
        }
    }
}
